<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>神社的储物间</title>
  <icon>https://mxts.jiujiuer.xyz/icon.png</icon>
  <subtitle>*节操消失了*</subtitle>
  <link href="https://mxts.jiujiuer.xyz/atom.xml" rel="self"/>
  
  <link href="https://mxts.jiujiuer.xyz/"/>
  <updated>2024-04-18T06:51:23.806Z</updated>
  <id>https://mxts.jiujiuer.xyz/</id>
  
  <author>
    <name>xeonds</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Rust学习</title>
    <link href="https://mxts.jiujiuer.xyz/2024/04/17/Rust/"/>
    <id>https://mxts.jiujiuer.xyz/2024/04/17/Rust/</id>
    <published>2024-04-17T16:00:00.000Z</published>
    <updated>2024-04-18T06:51:23.806Z</updated>
    
    <content type="html"><![CDATA[<p>参考视频：【Rust 编程语言入门教程（Rust 语言&#x2F;Rust 权威指南配套）【已完结】】 <a href="https://www.bilibili.com/video/BV1hp4y1k7SV/?p=12&amp;share_source=copy_web&amp;vd_source=faa4d83326aa65fa16123ce1d49425a3">https://www.bilibili.com/video/BV1hp4y1k7SV/?p=12&amp;share_source=copy_web&amp;vd_source=faa4d83326aa65fa16123ce1d49425a3</a></p><p>我将采用注释式笔记, 也就是所有知识都用代码文件存放, 在注释中写明知识点</p><p>[[猜数游戏]]<br>[[rust变量类型]]</p>]]></content>
    
    
    <summary type="html">好东西</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>Rust变量类型</title>
    <link href="https://mxts.jiujiuer.xyz/2024/04/17/rust%E5%8F%98%E9%87%8F%E7%B1%BB%E5%9E%8B/"/>
    <id>https://mxts.jiujiuer.xyz/2024/04/17/rust%E5%8F%98%E9%87%8F%E7%B1%BB%E5%9E%8B/</id>
    <published>2024-04-17T16:00:00.000Z</published>
    <updated>2024-04-18T06:51:23.806Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;Hello, world!&quot;</span>);</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">    <span class="comment">// 不可变变量</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">x</span> = <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;x的值是:&#123;&#125;&quot;</span>,x);</span><br><span class="line"></span><br><span class="line">    x = <span class="number">6</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;x的值是:&#123;&#125;&quot;</span>,x);</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">    <span class="comment">// 常量也是不可变的,但是不可约使用mut,永远都不可变</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 声明常量必须使用const</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 声明常量必须标注类型</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 常量可以在任何作用域声明,包括全局作用域</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 常量只能被设置为常量表达式,不能是函数调用的结果,或任何其他只能在运行时计算得到的值</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 常量在运行期间总是存在的,并且它们在任何作用域中都可以被访问</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 常量使用全大写字母和下划线命名,并且下划线可以用来增加可读性</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 数字中间可以插入下划线来增加可读性</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> MAX_POINTS:<span class="type">u32</span> = <span class="number">100_000</span>;</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">    <span class="comment">// 隐藏变量</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 可以用同样的名字声明一个新变量,而新变量会隐藏之前的变量</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">x</span> = <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;x的值是:&#123;&#125;&quot;</span>,x);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">x</span> = x + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;x的值是:&#123;&#125;&quot;</span>,x);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 虽然x是不可变的,但是可以用let关键字来声明一个新变量,这样就可以隐藏之前的变量</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 相当于override</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">x</span> = x * <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;x的值是:&#123;&#125;&quot;</span>,x);</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">    <span class="comment">// shadow和把变量标记为mut是不一样的</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 用let声明的新变量也是不可变的</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用let声明的同名新变量的类型可以和之前的不一样</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">spaces</span> = <span class="string">&quot;    &quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">spaces</span> = spaces.<span class="title function_ invoke__">len</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 这里把spaces的类型从字符串变成了数字,但是名字还是spaces,其实是一个新的变量,同名隐藏掉原来的变量</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果这里不加let,会报错,因为变量是不可变的</span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;spaces的值是:&#123;&#125;&quot;</span>,spaces);</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">    <span class="comment">// 数据类型</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// Rust是静态类型语言,必须在编译时知道所有变量的类型</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果可能的类型比较多,例如parse方法,就必须添加类型的标注</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">guess</span>:<span class="type">u32</span> = <span class="string">&quot;43&quot;</span>.<span class="title function_ invoke__">parse</span>().<span class="title function_ invoke__">expect</span>(<span class="string">&quot;不是个数!&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果不标注是u32类型,会报错</span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;guess的值是:&#123;&#125;&quot;</span>,guess);</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">    <span class="comment">// 标量类型</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 标量类型代表单个的值</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// rust一共有四个主要的标量类型:整数,浮点数,布尔类型,字符类型</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 整数类型</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 有符号整数:i8,i16,i32,i64,i128,isize</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 无符号整数:u8,u16,u32,u64,u128,usize</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// isize和usize类型依赖运行程序的计算机架构:64位计算机上是64位,32位计算机上是32位</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 默认是i32类型</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 除了byte类型,其他类型都可以用类型后缀来标注,例如123u32</span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">    <span class="comment">// 整数溢出</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// Rust在编译时会检查是否有整数溢出,如果有,会报错</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// debug模式下会panic,release模式下会wrap,例如256u8会变成0,257u8会变成1</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 例如:let x:u8 = 256;会报错</span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">    <span class="comment">// 浮点数类型</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// rust有两种浮点数类型:f32和f64</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 默认是f64类型</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">x</span> = <span class="number">2.0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">y</span>:<span class="type">f32</span> = <span class="number">3.0</span>;</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">    <span class="comment">// 数值操作</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 加法</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">sum</span> = <span class="number">5</span> + <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">difference</span> = <span class="number">95.5</span> - <span class="number">4.3</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">producy</span> = <span class="number">4</span> * <span class="number">30</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">quotient</span> = <span class="number">56.7</span> / <span class="number">32.2</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">reminder</span> = <span class="number">54</span> % <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">    <span class="comment">// 布尔类型</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// rust有两个布尔值:true和false</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 布尔类型的大小是1个字节</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 布尔类型的值是bool类型</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">t</span> = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">f</span>:<span class="type">bool</span> = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">    <span class="comment">// 字符类型</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// Rust的char类型是单个Unicode字符,可以表示比ASCII更多的字符,例如中文,日文,韩文等,甚至是emoji表情</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// Rust的char类型是4个字节</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// Rust的char类型用单引号表示</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// Unicode中没有字符的概念,只有代码点,代码点是一个数字,代表一个字符</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">x</span> = <span class="string">&#x27;z&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">y</span>:<span class="type">char</span> = &#x27;😻&#x27;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">z</span> = <span class="string">&#x27;中&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;x的值是:&#123;&#125;&quot;</span>,x);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;y的值是:&#123;&#125;&quot;</span>,y);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;z的值是:&#123;&#125;&quot;</span>,z);</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">    <span class="comment">// 复合类型</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// Rust有两个复合类型:元组和数组</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 元组可以将多个不同类型的值组合在一起</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 数组可以将多个相同类型的值组合在一起</span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">    <span class="comment">// 元组tuple</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 元组是一个将多个其他类型的值组合在一起的复合类型</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 元组的长度是固定的,一旦声明,就不能增加或减少</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">tup</span>:(<span class="type">i32</span>,<span class="type">f64</span>,<span class="type">u8</span>) = (<span class="number">500</span>,<span class="number">6.4</span>,<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取tuple的值</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 可以使用模式匹配来解构一个tuple来获取元素的值</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> (x,y,z) = tup;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;x的值是:&#123;&#125;&quot;</span>,x);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;y的值是:&#123;&#125;&quot;</span>,y);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;z的值是:&#123;&#125;&quot;</span>,z);</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">    <span class="comment">// 访问tuple的元素</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用点号和索引来访问tuple的元素</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;&#123;&#125;,&#123;&#125;,&#123;&#125;&quot;</span>,tup.<span class="number">0</span>,tup.<span class="number">1</span>,tup.<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 数组</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 数组是一个将多个相同类型的值组合在一起的复合类型</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 数组的长度是固定的,一旦声明,就不能增加或减少</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 数组的类型标注是[Type;size],例如:[i32;5]</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 数组的元素可以通过索引访问,索引从0开始</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">a</span> = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">b</span>:[<span class="type">char</span>;<span class="number">5</span>] = [<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;d&#x27;</span>,<span class="string">&#x27;e&#x27;</span>];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果想把数据存在stack(栈)上而不是heap(堆)上就可以使用数组</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果想保证有固定数量的元素,也可以使用数组</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 数组没有Vector灵活</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// Vector是可以改变长度的,数组是固定长度的</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">months</span> = [<span class="string">&quot;January&quot;</span>,<span class="string">&quot;February&quot;</span>,<span class="string">&quot;March&quot;</span>,<span class="string">&quot;April&quot;</span>,<span class="string">&quot;May&quot;</span>,<span class="string">&quot;June&quot;</span>,<span class="string">&quot;July&quot;</span>,<span class="string">&quot;August&quot;</span>,<span class="string">&quot;September&quot;</span>,<span class="string">&quot;October&quot;</span>,<span class="string">&quot;November&quot;</span>,<span class="string">&quot;December&quot;</span>];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 这种不会变长度的就适合用数组</span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果每个元素都相同,还有一种语法</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">a</span> = [<span class="number">3</span>;<span class="number">5</span>];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 这样就会生成一个包含5个3的数组</span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">    <span class="comment">// 访问数组元素</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 数组是栈上的单个块的内存</span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">first</span> = months[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">second</span> = months[<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;first的值是:&#123;&#125;&quot;</span>,first);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;second的值是:&#123;&#125;&quot;</span>,second);</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果访问的索引超过了数组的范围,会报错panic</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// rust不允许其继续访问相应地址的内存,这样可以避免潜在的安全漏洞</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 不允许越界,只能访问数组占的内存空间</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 例如:let index = 10;let element = a[index];会报错</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 有时不会报错,例如:let index = [12,13,14,15]; let month = months[index[1]];可以通过编译,但是运行时会报错index out of bounds,程序panic</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">很好的命名法</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>Rust猜数游戏</title>
    <link href="https://mxts.jiujiuer.xyz/2024/04/17/%E7%8C%9C%E6%95%B0%E6%B8%B8%E6%88%8F/"/>
    <id>https://mxts.jiujiuer.xyz/2024/04/17/%E7%8C%9C%E6%95%B0%E6%B8%B8%E6%88%8F/</id>
    <published>2024-04-17T16:00:00.000Z</published>
    <updated>2024-04-18T06:51:23.806Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> std::io; <span class="comment">// prelude 序曲</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> rand::Rng; <span class="comment">// trait 是其他语言的接口,上面有很多方法</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> std::cmp::Ordering; <span class="comment">// 是一个枚举类型,有三个值,大于,小于,和等于</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// rust的库称为crate,crate是一个二进制或库,库是一个包含函数和其他代码的包,二进制crate是一个可以被执行的包,每个crate都有一个crate root,这是一个源文件,编译器从这个文件开始并编译整个crate,crate root是一个源文件,而不是一个目录,一个crate可以包含多个库,但只能包含一个二进制crate</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// crate分为二进制crate还有lib库,二进制crate是一个可以被执行的包,lib库是一个包含函数和其他代码的包,但不能被执行,只能被其他crate引用</span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;猜数!&quot;</span>);</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">    <span class="comment">// rng是个接口,上面一个函数gen_range,范围是1-100,包括1,不包括101</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">secret_number</span> = rand::<span class="title function_ invoke__">thread_rng</span>().<span class="title function_ invoke__">gen_range</span>(<span class="number">1</span>..<span class="number">101</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// println!(&quot;神秘数字是:&#123;&#125;!&quot;, secret_number);</span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用loop循环,无限循环,直到猜对为止</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">loop</span>&#123;</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">&quot;猜测一个数:&quot;</span>);</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">        <span class="comment">// let mut foo = 1;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// let bar = foo; // immutable</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 要表示0到100的范围,使用u32,无符号32位整数,默认是i32,有符号32位整数,也可以i64</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">guess</span> = <span class="type">String</span>::<span class="title function_ invoke__">new</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 产生Stdin实例,存句柄,用read_line方法用可变的字符串参数获取输入,前面&amp;表示是引用传递参数,引用默认是不可变的,需要加入mut参数,readline返回Result类型变量,是枚举类型,值称为变体,两个变体:ok和err,ok变体包含一个元组,元组的第一个元素是一个引用,指向一个字符串,这个字符串是readline方法读取的内容,err变体包含一个错误值</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// Result上还定义了方法expect,如果是ok,则这个方法会提取里面的值,如果返回err,则expect会使程序崩溃,并显示传递给expect的参数,显示失败原因</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 不调用expect方法也行,但是会出现警告,安全性保证</span></span><br><span class="line"></span><br><span class="line">        io::<span class="title function_ invoke__">stdin</span>().<span class="title function_ invoke__">read_line</span>(&amp;<span class="keyword">mut</span> guess)</span><br><span class="line"></span><br><span class="line">            .<span class="title function_ invoke__">expect</span>(<span class="string">&quot;无法读取行&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// rust允许使用同名的新变量来隐藏之前的变量</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// trim方法去掉字符串前后的空白字符,parse方法将字符串转换为数字,parse方法返回Result类型,所以需要expect方法</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> <span class="variable">guess</span>:<span class="type">u32</span> = <span class="keyword">match</span> guess.<span class="title function_ invoke__">trim</span>().<span class="title function_ invoke__">parse</span>()&#123;</span><br><span class="line"></span><br><span class="line">            <span class="title function_ invoke__">Ok</span>(num) =&gt; num,</span><br><span class="line"></span><br><span class="line">            <span class="title function_ invoke__">Err</span>(_) =&gt; <span class="keyword">continue</span>,</span><br><span class="line"></span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// parse方法将字符串转换为数字,parse方法返回Result类型,所以需要expect方法</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 声明u32是为了告诉parse()方法,我们想要一个u32类型的数字,如果不声明,parse()方法会返回一个通用数字类型,这样就需要告诉编译器我们想要的类型</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 这之后的guess是一个新的变量,是一个u32类型,之前的guess是一个字符串类型</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 花括号是后面变量的值,用来在字符串中插入变量值</span></span><br><span class="line"></span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">&quot;你猜测的数是: &#123;&#125;&quot;</span>, guess);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 方法guess.cmp,compare,三种情况,使用一个枚举类型</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// match表达式,根据后面返回值决定做什么,多个手臂arm组成,每个手臂都有一个匹配的模式,匹配上就执行操作</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 如果match紧跟着的某个值和某个手臂的模式匹配,就会执行这个手臂的代码块</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 静态强类型语言</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">match</span> guess.<span class="title function_ invoke__">cmp</span>(&amp;secret_number)&#123;</span><br><span class="line"></span><br><span class="line">            Ordering::Less =&gt; <span class="built_in">println!</span>(<span class="string">&quot;太小了!&quot;</span>), <span class="comment">// arm</span></span><br><span class="line"></span><br><span class="line">            Ordering::Greater =&gt; <span class="built_in">println!</span>(<span class="string">&quot;太大了!&quot;</span>),</span><br><span class="line"></span><br><span class="line">            Ordering::Equal =&gt; &#123;</span><br><span class="line"></span><br><span class="line">                <span class="built_in">println!</span>(<span class="string">&quot;猜对啦!&quot;</span>);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">            &#125;,</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">入门实践</summary>
    
    
    
    
  </entry>
  
</feed>
